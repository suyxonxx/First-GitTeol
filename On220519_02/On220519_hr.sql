/*
    집계함수 : COUNT, SUM, AVG, MAX, MIN, --GROUP BY HAVING (조건)
 */

SELECT *
FROM EMPLOYEES;

SELECT COUNT(SALARY), COUNT(*)
FROM EMPLOYEES;

SELECT SUM(SALARY), AVG(SALARY)
FROM EMPLOYEES;

SELECT MAX(SALARY), MIN(SALARY)
FROM EMPLOYEES;

--STDDEV : 표준편차, VARIANCE : 분산
SELECT STDDEV(SALARY), VARIANCE(SALARY)
FROM EMPLOYEES;

/*
    GROUP BY 동작 순서
    1. 테이블에서 WHERE 조건식에 맞는 데이터 값만 구분
    2. 지정한 열 기준으로 같은 데이터 값으로 그룹화
    3. 지정한 열들의 그룹화된 집계 결과 출력
*/

SELECT JOB_ID, SUM(SALARY), AVG(SALARY)
FROM EMPLOYEES
GROUP BY JOB_ID;

SELECT DEPARTMENT_ID, JOB_ID, SALARY
FROM EMPLOYEES;

SELECT JOB_ID, SUM(SALARY), AVG(SALARY)
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 50
GROUP BY JOB_ID;

SELECT DEPARTMENT_ID, MAX(SALARY), MIN(SALARY)
FROM EMPLOYEES
WHERE HIRE_DATE > '20070101'
GROUP BY DEPARTMENT_ID;

SELECT DEPARTMENT_ID, SALARY, HIRE_DATE
FROM EMPLOYEES
WHERE HIRE_DATE > '20070101';

SELECT COUNTRY_ID, COUNT(COUNTRY_ID)
FROM LOCATIONS
GROUP BY COUNTRY_ID;

SELECT JOB_ID, DEPARTMENT_ID, SUM(SALARY), AVG(SALARY)
FROM EMPLOYEES
WHERE DEPARTMENT_ID BETWEEN 50 AND 100
GROUP BY JOB_ID, DEPARTMENT_ID;

SELECT JOB_ID, MAX(SALARY), MIN(SALARY)
FROM EMPLOYEES
GROUP BY JOB_ID;

SELECT MANAGER_ID, DEPARTMENT_ID, MAX(SALARY), MIN(SALARY)
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 50
GROUP BY MANAGER_ID, DEPARTMENT_ID
ORDER BY MANAGER_ID;

SELECT DEPARTMENT_ID, MANAGER_ID, JOB_ID, MAX(SALARY), MIN(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID, MANAGER_ID, JOB_ID
ORDER BY MANAGER_ID;

SELECT DEPARTMENT_ID, MANAGER_ID, JOB_ID, MAX(SALARY), MIN(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID, MANAGER_ID, JOB_ID
ORDER BY MANAGER_ID, DEPARTMENT_ID DESC;

SELECT JOB_ID, SUM(SALARY), AVG(SALARY)
FROM EMPLOYEES
GROUP BY JOB_ID
HAVING AVG(SALARY) >= 10000;

SELECT DEPARTMENT_ID, MIN(SALARY), MAX(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING MAX(SALARY) > 7000
ORDER BY MAX(SALARY);

SELECT COUNTRY_ID, COUNT(COUNTRY_ID)
FROM LOCATIONS
GROUP BY COUNTRY_ID
HAVING COUNT(COUNTRY_ID) > 2;

SELECT JOB_ID, DEPARTMENT_ID, SUM(SALARY), AVG(SALARY)
FROM EMPLOYEES
WHERE DEPARTMENT_ID BETWEEN 50 AND 100
GROUP BY JOB_ID, DEPARTMENT_ID
HAVING AVG(SALARY) > 9000
ORDER BY AVG(SALARY);

SELECT MANAGER_ID, DEPARTMENT_ID, JOB_ID, SUM(SALARY), AVG(SALARY), MAX(SALARY)
FROM EMPLOYEES
WHERE MANAGER_ID IN(100,101)
GROUP BY MANAGER_ID, DEPARTMENT_ID, JOB_ID;

SELECT MANAGER_ID, DEPARTMENT_ID, JOB_ID, SUM(SALARY), AVG(SALARY), MAX(SALARY)
FROM EMPLOYEES
GROUP BY MANAGER_ID, DEPARTMENT_ID, JOB_ID
HAVING SUM(SALARY) BETWEEN 10000 AND 40000;

--EMPLOYEES 테이블에서 SALARY가 8000이상인 직원의 수를 조회
SELECT COUNT(*)
FROM EMPLOYEES
WHERE SALARY > 8000;

--EMPLOYEES 테이블에서 HIRE_DATE가 2007년 1월 1일 이후인 직원의 수를 조회
SELECT COUNT(*)
FROM EMPLOYEES
WHERE HIRE_DATE > '2007-01-01';

--JOBS 테이블에서 MAX_SALARY 값의 합계와 평균을 조회
SELECT SUM(MAX_SALARY), AVG(MAX_SALARY)
FROM JOBS;

--EMPLOYEES 테이블에서 JOB_ID가 'IT_PROG'인 직원의 SALARY 합계와 평균을 조회
SELECT JOB_ID, SUM(SALARY), AVG(SALARY)
FROM EMPLOYEES
GROUP BY JOB_ID
HAVING JOB_ID = 'IT_PROG';

/*  EMPLOYEES 테이블에서 HIRE_DATE 값이 2004년 1월 1일부터 2006년 12월 31일 사이의
    데이터를 JOB_ID 기준으로 그룹화한 뒤에 JOB_ID와 SALARY의 최솟값과 최대값을 조회*/
SELECT JOB_ID, HIRE_DATE, MIN(SALARY), MAX(SALARY)
FROM EMPLOYEES
GROUP BY JOB_ID, HIRE_DATE
HAVING HIRE_DATE BETWEEN '2004-01-01' AND '2006-12-31';

/*  EMPLOYEES 테이블에서 DEPARTMENT_ID가 50과 80인 데이터를 DEPARTMENT_ID와
    JOB_ID 기준으로 그룹화한 뒤에 DEPARTMENT_ID와 JOB_ID, SALARY 합계,
    SALARY 최소값, SALARY 최대값을 JOB_ID 기준으로 정렬하여 조회*/
SELECT DEPARTMENT_ID, JOB_ID, SUM(SALARY), MIN(SALARY), MAX(SALARY)
FROM EMPLOYEES
GROUP BY JOB_ID, DEPARTMENT_ID
HAVING DEPARTMENT_ID IN(50, 80)
ORDER BY JOB_ID;

/*  EMPLOYEES 테이블에서 DEPARTMENT_ID와 JOB_ID 기준으로 그룹화한 뒤에 SALARY의
    평균값이 12000 이상인 데이터만 DEPARTMENT_ID와 JOB_ID, SALARY 최소값,
    SALARY 최대값, SALARY 평균을 DEPARTMENT_ID 기준으로 정렬하여 조회*/
SELECT DEPARTMENT_ID, JOB_ID, MIN(SALARY), MAX(SALARY), AVG(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID, JOB_ID
HAVING AVG(SALARY) >= 12000
ORDER BY DEPARTMENT_ID;

--NVL : NULL 값을 특정한 값으로 치환해줌.
SELECT DEPARTMENT_NAME, NVL(MANAGER_ID, 100)
FROM DEPARTMENTS;

SELECT NVL(STATE_PROVINCE, 'None')
FROM LOCATIONS
ORDER BY STATE_PROVINCE;

--NVL2(A, B, C) : A값이 NULL이 아니면 B, NULL이면 C로 치환해줌.
SELECT DEPARTMENT_NAME, NVL2(MANAGER_ID, '관리자', '무')
FROM DEPARTMENTS;

--DECODE(A, B, C, A) : A값이 B의 조건값과 일치할 경우 C, 불일치할 경우 D 출력
SELECT MIN_SALARY, DECODE(MIN_SALARY, 2500, MIN_SALARY * 1.1, MIN_SALARY)
FROM JOBS;

SELECT JOB_TITLE, MIN_SALARY,
    CASE
        WHEN MIN_SALARY < 4000 THEN MIN_SALARY * 1.2
        WHEN MIN_SALARY BETWEEN 4000 AND 6000 THEN MIN_SALARY * 1.1
        ELSE MIN_SALARY
    END AS 최소급여변경
FROM JOBS;

SELECT FIRST_NAME, SALARY,
    RANK() OVER(ORDER BY SALARY DESC) AS RANK,
    DENSE_RANK() OVER(ORDER BY SALARY DESC) AS DENSE_RANK,
    ROW_NUMBER() OVER(ORDER BY SALARY DESC) AS ROW_RANK
FROM EMPLOYEES;
